@using concord.Configuration
@using concord.Output
@using concord.Output.Dto
@using concord.Output.JsonConverters
@using Newtonsoft.Json
@model concord.RazorTemplates.Models.FancyResults

@{
    Layout = null;
}


@helper GanttChartBuilder()
{
    var ganttChart = ContainerReference.Container.GetInstance<IHtmlGanttChart>();

    var testLines = ganttChart.SeperateIntoLines(Model.Runners);

    <div style='position:relative;height:@(testLines.Count * LineHeight)px;'>
    @{
        var lineNumber = 0;
        foreach (var line in testLines)
        {
            @TestLineBuilder(lineNumber, line)
            lineNumber++;
        }
    }
    </div>
}
@helper TestLineBuilder(int lineNumber, IEnumerable<RunStats> line)
{
    foreach (var test in line)
    {
        Func<TimeSpan, double> toPixels = x => x.TotalMilliseconds / DIVISOR;
        var left = toPixels(test.StartTime);
        var top = lineNumber * LineHeight;
        <div id="@(test.Name)" style="position:absolute;left:@(left)px;top:@(top)px;width:@(toPixels(test.RunTime))px;height:@(BarHeight)px;border: 1px solid black;" title="@(test.Name)"></div>
    }
}
@functions
{
        private const int DIVISOR = 1000;
        private const int BarPadding = 2;
        private const int BarHeight = 10;

        private const int LineHeight = BarPadding + BarHeight;

    string GetRunnersInJson()
    {
        //var ganttChart = ContainerReference.Container.GetInstance<IHtmlGanttChart>();
        //
        //return JsonConvert.SerializeObject(ganttChart.SeperateIntoLines(Model.Runners), new TimeSpanJsonConverter());
        return JsonConvert.SerializeObject(Model.Runners, new TimeSpanJsonConverter());
    }
}

<!DOCTYPE html>

<html>
    <head>
        <title>Run Stats - Fancy!</title>

        <script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
        <script src="https://cdn.rawgit.com/anomal/RainbowVis-JS/master/rainbowvis.js"></script>
        <script src="https://cdn.rawgit.com/eoinmurray/histogram/master/histogram.js"></script>
        <link rel="stylesheet" href="http://yui.yahooapis.com/pure/0.5.0/pure-min.css">
        
        <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.min.js"></script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/tinysort/1.5.6/jquery.tinysort.min.js"></script>

        <style type="text/css">
            .button-success,
            .button-error,
            .button-warning,
            .button-secondary {
                color: white;
                border-radius: 4px;
                text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);
            }

             .ganttChartButton {
                 font-size: 70%;
                 margin: .25em;
             }

            .button-success {
                background: rgb(28, 184, 65); /* this is a green */
            }

            .button-error {
                background: rgb(202, 60, 60); /* this is a maroon */
            }

            .button-warning {
                background: rgb(223, 117, 20); /* this is an orange */
            }
            .button-warning.pure-button-active {
                background: #99500e; /* this is an orange */
            }


            .section {
                margin-bottom: 1em;
            }
            .sectionHeader {
            }

            #GanttChartButtons {
                width: 600px;
            }


            .leadingZero {
                color:#888;
            }
            .booleanValue {
                font-size: 3em;
                line-height: 0;
                vertical-align: middle;
            }
            .booleanValue.true {
                color:#080;
            }
            .booleanValue.false {
                color:#800;
            }


.testRuns {
	margin:0 7px;
	padding:0px;
	width:80%;
	box-shadow: 2px 2px 5px #888888;
	border:1px solid #666666;
	
	border-bottom-left-radius:5px;
	border-bottom-right-radius:5px;
	border-top-right-radius:5px;
	border-top-left-radius:5px;
}.testRuns table{
    border-collapse: collapse;
        border-spacing: 0;
	width:100%;
	height:100%;
	margin:0px;padding:0px;
}.testRuns tbody tr:last-child td:last-child {
	border-bottom-right-radius:5px;
}
.testRuns table thead th:first-child {
	border-top-left-radius:5px;
}
.testRuns table thead th:last-child {
	border-top-right-radius:5px;
}.testRuns tbody tr:last-child td:first-child{
	border-bottom-left-radius:5px;
}.testRuns tr:hover td{
	background-color:#ffffff;
}
.testRuns tbody {
    background-color:#ffd4aa;
}
.testRuns td{
	vertical-align:middle;
	
	background-color:#ffd4aa;

	border:1px solid #666666;
	border-width:0px 1px 1px 0px;
	text-align:right;
	padding:3px;
	font-size:12px;
	font-family:Arial;
	font-weight:normal;
	color:#000000;
}.testRuns tbody tr:last-child td{
	border-width:0px 1px 0px 0px;
}.testRuns tr td:last-child{
	border-width:0px 0px 1px 0px;
}.testRuns tbody tr:last-child td:last-child{
	border-width:0px 0px 0px 0px;
}
.testRuns thead th{
	background:-o-linear-gradient(bottom, #ff7f00 5%, #bf5f00 100%);
	background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #ff7f00), color-stop(1, #bf5f00) );
	background:-moz-linear-gradient( center top, #ff7f00 5%, #bf5f00 100% );
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#ff7f00", endColorstr="#bf5f00");
	background: -o-linear-gradient(top,#ff7f00,bf5f00);

	background-color:#ff7f00;
	border:0px solid #666666;
	text-align:center;
	border-width:0px 0px 1px 1px;
	font-size:14px;
	font-family:Arial;
	font-weight:bold;
	color:#ffffff;
}
.testRuns thead:hover th{
	background:-o-linear-gradient(bottom, #ff7f00 5%, #bf5f00 100%);
	background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #ff7f00), color-stop(1, #bf5f00) );
	background:-moz-linear-gradient( center top, #ff7f00 5%, #bf5f00 100% );
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#ff7f00", endColorstr="#bf5f00");
	background: -o-linear-gradient(top,#ff7f00,bf5f00);

	background-color:#ff7f00;
}
.testRuns thead th:first-child{
	border-width:0px 0px 1px 0px;
}
.testRuns thead th:last-child{
	border-width:0px 0px 1px 1px;
}
        </style>
    </head>
    <body>
        <div id="fancyGanttChart">
            @{
                //var data = Model.Runners.OrderBy(x => x.StartOrder);

                //var DIVIDEND = 1000;
                //var graphData = data.Select(x => new //HtmlGanttChart.LineData
                //{
                //    Offset = (float)x.StartTime.TotalMilliseconds / DIVIDEND,
                //    Length = (float)(x.EndTime - x.StartTime).TotalMilliseconds / DIVIDEND,
                //    Name = x.Name,
                //    Success = x.IsSuccess,

                //    FailurePercentage = x.FailureCount * 100.0 / x.DatapointsInAverage
                //});
                
                
                <div class="section">
                    <div class="sectionHeader">Gantt Chart:</div>
                    @GanttChartBuilder()
                </div>
                
                <div class="section">
                    <div class="sectionHeader">Histograms:</div>
                    <div id="GanttChartButtons"></div>
                    <div id="GanttChartLegend"></div>
                </div>
                
                <div class="section">
                    <div class="sectionHeader">Grid:</div>
                    <div id="ResultsGrid" class="testRuns"></div>
                </div>
                

                //<div id="fancyGanttChart_placeholder"></div>
                //IF JQUERY RENDER: @Html.Raw("var chartData = " + JsonConvert.SerializeObject(graphData) + ";")

                
                
                
                @*var maxWidth = 100;
                var maxHeight = 100;
                
                <div style='position:relative;width:@(maxWidth)px;height:@(maxHeight)px'>
                    @string.Format("<div style='position:absolute;border:solid {0} {1}px;background-color:{2};left:{3}px;top:{4}px;width:{5}px;height:{6}px' {7}></div>",
                        borderColor,
                        borderWidth,
                        fillColor,
                        x, y,
                        width, height,
                        title == null ? "" : "title='" + title + "'");
                </div>*@
            }
        </div>

        <div>
            Total Runtime: @Model.TotalRuntime
        </div>
        
        <script type="text/javascript">
            //#Settings
            //{ get:function(v) {}, LowerIsBetter:true, Min:0, Max:100, Label:"hi", default:true }
            availableFields = {
                Success: { get: function (v) { return v.ExitCode === 0 ? 1 : 0; }, LowerIsBetter:false, Min: 0, default:true },
                RunTime: { get: function (v) { return v.RunTime; } },
                FailurePercent: { get: function (v) { return v.FailureCount * 100 / v.DatapointsInAverage; }, Min: 0 },
                WeightedAverageTime: { get: function (v) { return v.WeightedAverageTime; } },
                FailedAverageTime: { get: function (v) { return v.FailedAverageTime; } },
                AverageTime: { get: function (v) { return v.AverageTime; } },
                TimeWasters: { Label: "Time Wasters (Historic)", get: function (v) { return v.FailureCount * v.FailedAverageTime; } },
                TimeWastersProj: { Label: "Time Wasters (Projected)", get: function (v) { return (v.FailureCount * 100 / v.DatapointsInAverage) * v.FailedAverageTime; } },
                WeightedVsLast: { Label: "Weighted Vs RunTime", get: function (v) { return v.RunTime / v.WeightedAverageTime; } },
                AverageVsLast: { Label: "Average Vs RunTime", get: function (v) { return v.RunTime / v.AverageTime; } },
            };

            testRunData = @Raw(GetRunnersInJson());
            testRunMaximums = GetMaximums(testRunData);
            //#Settings

            //#Initialization
            function GetMaximums(data) {
                //var flattened = $(data).map(function() { return this; });
                var flattened = testRunData;

                var output = {};
                jQuery.each(flattened, function(index, value) {
                    //CheckMinMax(output, "RunTime", value.RunTime);
                    //CheckMinMax(output, "FailurePercent", value.FailureCount * 100 / value.DatapointsInAverage);
                    //CheckMinMax(output, "WeightedAverageTime", value.WeightedAverageTime);
                    //CheckMinMax(output, "FailedAverageTime", value.FailedAverageTime);
                    //CheckMinMax(output, "AverageTime", value.AverageTime);

                    jQuery.each(availableFields, function(name, fieldData) {
                        CheckMinMax(output, name, fieldData.get(value));
                    });
                });

                return output;
            }
            function CheckMinMax(object, field, newValue) {
                var minValue = object[field + "_min"];
                if (minValue === undefined || newValue < minValue)
                    object[field + "_min"] = newValue;

                var maxValue = object[field + "_max"];
                if (maxValue === undefined || newValue > maxValue)
                    object[field + "_max"] = newValue;
            }

            function BuildButtons() {
                var container = jQuery('#GanttChartButtons');

                jQuery.each(availableFields, function(name, valueGetter) {
                    var displayName = valueGetter.Label || name;
                    container.append('<div id="GanttButton_' + name + '" class="ganttChartButton pure-button button-warning" onclick="SetColors(\'' + name + '\')">' + displayName + "</div>");

                    if (valueGetter.default) {
                        SetColors(name);
                    }
                });
            }
            BuildButtons();
            //#Initialization


            function SetColors(usingFieldName) {
                var fieldData = availableFields[usingFieldName];
                var rainbow = GetRainbow(usingFieldName, fieldData);

                SetButtonActive(usingFieldName);

                jQuery.each(testRunData, function(index, testRun) {
                    var element = jQuery('#' + testRun.Name);
                    //console.log(element);
                    var testValue = fieldData.get(testRun);
                    //console.log(testValue);
                    //console.log(rainbow.colourAt(testValue));
                    element.css('background-color', '#' + rainbow.colourAt(testValue));
                });

                var allValues =  $(testRunData).map(function() { return fieldData.get(this); });
                jQuery('#GanttChartLegend').empty().append(BuildHistogram(allValues.toArray(), rainbow));
            }
            function SetButtonActive(usingFieldName) {
                var allButtons = jQuery('#GanttChartButtons > .ganttChartButton.pure-button-active');
                allButtons.removeClass("pure-button-active");

                jQuery('#GanttButton_' + usingFieldName).addClass("pure-button-active");
            }
            function GetRainbow(fieldName, fieldData) {
                var rainbow = new Rainbow();

                var LowerIsBetter = fieldData.LowerIsBetter === undefined ? true : fieldData.LowerIsBetter;

                if (LowerIsBetter === true) {
                    rainbow.setSpectrum('white', 'yellow', 'red');
                } else {
                    rainbow.setSpectrum('red', 'grey', 'green');
                }

                var min = fieldData.Min === undefined ? testRunMaximums[fieldName + "_min"] : fieldData.Min;
                var max = fieldData.Max === undefined ? testRunMaximums[fieldName + "_max"] : fieldData.Max;
                rainbow.setNumberRange(min, max);

                return rainbow;
            }

            //function SetLegend(rainbow, min, max, fieldData) {
            //    var legend = jQuery('#GanttChartLegend');

            //    var formatFunc = fieldData.FormatValue || function(v) { return v; };

            //    var maxElement = jQuery("<div>Max value: " + formatFunc(max) + "</div>");
            //    maxElement.css('background-color', '#' + rainbow.colourAt(max));
            //    legend.append(maxElement);

            //    //Blah idk how to do this... need a histogram.
            //    var median = 10;
            //    var medianElement = jQuery("<div>Median value: " + formatFunc(median) + "</div>");
            //    medianElement.css('background-color', '#' + rainbow.colourAt(median));
            //    legend.append(medianElement);

            //    var minElement = jQuery("<div>Min value: " + formatFunc(min) + "</div>");
            //    minElement.css('background-color', '#' + rainbow.colourAt(min));
            //    legend.append(minElement);
            //}
            function BuildHistogram(arrayOfNumbers, rainbow) {

                var formatFunc = function(v) { return v.y + ' at value: ' + v.x; };

                var binCount = 30;
                var HEIGHT = 100;
                var WIDTH = 300;

                //clean input
                //arrayOfNumbers = $(arrayOfNumbers).map(function() { return Number(this); });
                //arrayOfNumbers.sort();
                //console.log(JSON.stringify(arrayOfNumbers));

                var data = histogram({
                    data: arrayOfNumbers,
                    bins: binCount
                });

                //console.log(JSON.stringify(data));

                //console.log(data);
                var flattened = $(data).map(function() { return { x: this.x, y: this.y }; });
                //console.log(flattened);

                var binWidth = WIDTH / binCount - 1;

                var minValue = 0;
                var maxValue = Math.max.apply(Math, flattened.map(function () { return this.y; }));

                var container = jQuery("<div style='position:relative;height:" + HEIGHT + "px;width:" + WIDTH + "px'></div>");
                jQuery.each(flattened, function(index, value) {

                    var left = index * (binWidth + 1);

                    var hRatio = (value.y - minValue) / (minValue + maxValue);
                    var top = HEIGHT * (1 - hRatio);
                    var height = HEIGHT * hRatio;

                    var color = rainbow.colourAt(value.x);

                    container.append('<div style="position:absolute;left:' + left + 'px;top:' + top + 'px;width:' + binWidth + 'px;height:' + height + 'px;background-color:#' + color + ';border: 1px solid #999;" title="' + formatFunc(value) + '"></div>');
                });

                return container;
            }
        </script>
        
        <script type="text/javascript">
            var chartConfigBase = {
                columns: {
                    "Failures": {
                        format: function (v){ return v.toString().replace(/^(\d+.\d{3})\d*$/, "$1") + " %"; },
                        Max: 12.5
                    },
                    //"ExitCode": {
                    //    format: function (v){ return v; }
                    //}
                    "ExitCode": {
                        Max:1
                    },
                    "IsSuccess": {
                        Max:-1 //disabled max
                    },
                    "IsCurrent": {
                        Max:-1
                    }
                }
            }

            var BuildChartData = function(data) {
                return data.map(function(d) { return new ChartData(d); });
            };
            var BuildMaxChartData = function(chartData) {
                var output = {};
                jQuery.each(chartData[0], function(name, value) {
                    var valuesArray = chartData.map(function(d) { return d[name]; });
                    var maxValue = GetMaxValue(valuesArray);
                    if (!isNaN(maxValue)) {
                        output[name] = maxValue;
                    }
                });
                return output;
            };
            function ChartData(testRun) {
                return {
                    "Name": testRun.Name,
                    //"StartTime": testRun.StartTime,
                    //"EndTime": testRun.EndTime,
                    "RunTime": moment.duration(testRun.RunTime),
                    //"FinishOrder": testRun.FinishOrder,
                    //"StartOrder": testRun.StartOrder,
                    "ExitCode": testRun.ExitCode === 0 ? "" : testRun.ExitCode,
                    //"TestRunId": testRun.TestRunId,
                    "Count": testRun.DatapointsInAverage,
                    //"FailureCount": testRun.FailureCount,

                    "Failures": (testRun.FailureCount * 100 / testRun.DatapointsInAverage),

                    "AverageTime": moment.duration(testRun.AverageTime),
                    "WeightedAverageTime": moment.duration(testRun.WeightedAverageTime),
                    "FailedAverageTime": moment.duration(testRun.FailedAverageTime),

                    "IsSuccess": testRun.ExitCode === 0 ? true : false,
                    "IsCurrent": testRun.TestRunId === 0 ? true : false
                };
            }



            function BuildHtmlTable(config, data) {
                var output = '<table>';

                output += '<thead>';
                output += BuildHtmlTableRow(config, data[0], true);
                output += '</thead>';

                output += '<tbody>';
                jQuery.each(data, function(index, value) {
                    output += BuildHtmlTableRow(config, value);
                });
                output += '</tbody>';

                output += '</table>';
                return output;
            }
            function BuildHtmlTableRow(chartConfig, rowData, header) {
                var output = '<tr>';

                jQuery.each(rowData, function(name, value) {
                    if (header) {
                        output += '<th class="cell_' + name + '">' + name + '</td>';
                    }else{
                        var rawValue = ' data-value="' + value + '"';
                        output += '<td class="cell_' + name + '"' + rawValue + '>'
                            + FormatValue(chartConfig, name, value)
                            + '</td>';
                    }
                });

                output += '</tr>';
                return output;
            }

            function AddBackgroundPercentages(htmlTable, chartConfig, maxData) {
                var columnsConfig = chartConfig && chartConfig.columns;

                jQuery.each(maxData, function(name, maxValue) {
                    var overrideMax = (columnsConfig[name] === undefined || columnsConfig[name].Max === undefined)
                        ? maxValue
                        : columnsConfig[name].Max;
                    maxValue = overrideMax;

                    if (maxValue <= 0)
                        return;

                    var cells = htmlTable.find("tbody > tr > .cell_" + name);
                    //cells.css("background", "linear-gradient(to right, rgba(0, 0, 0, 0) 40%, rgba(0, 102, 0, 170) 40%)");
                    cells.css("background", function (){
                        //"linear-gradient(to right, rgba(0, 0, 0, 0) 40%, rgba(0, 102, 0, 170) 40%)")
                        var rawValue = $(this).data('value');
                        var percent = rawValue * 100 / maxValue;
                        if (percent >= 100)
                            return "#E89680";
                        return "linear-gradient(to left, rgba(255, 186, 119, 170) " + percent + "%, rgba(0, 0, 0, 0) " + percent + "%)";
                    });
                });
            }

            function FormatValue(chartConfig, name, value) {
                var columnsConfig = chartConfig && chartConfig.columns;
                if (columnsConfig
                    && columnsConfig[name]
                    && columnsConfig[name].format !== undefined) {
                    return chartConfig.columns[name].format(value);
                }
                if (moment.isDuration(value)) {
                    //with twix.js:
                    //return value.simpleFormat("m:ss.SSS");
                    var minutes = Math.abs(value.minutes()),
                        seconds = Math.abs(value.seconds()),
                        milliseconds = Math.round(Math.abs(value.milliseconds()));
                    var rawOutput = (minutes ? minutes : '0') + ':' +
                    (seconds ? ("00" + seconds).slice(-2) : '00') + '.' +
                    (milliseconds ? ("000" + milliseconds).slice(-3) : '000');
                    var htmlOutput = rawOutput.replace(/^[0:\.]+/, "<span class='leadingZero'>$&</span>");
                    return htmlOutput;
                }
                if (typeof(value) === "boolean") {
                    return "<span class='booleanValue " + value + "'>&#8226;</span>";
                }
                return value;
            }
            function GetMaxValue(valuesArray) {

                return Math.max.apply(Math, valuesArray);
            }


            function AddTableSorting(table) {
                var aAsc = [];
                function sortTable(e) {
                    var nr = $(e.currentTarget).index();
                    aAsc[nr] = aAsc[nr]=='desc'?'asc':'desc';
                    table.find('tbody>tr').tsort('td:eq('+nr+')', {
                        order:aAsc[nr],
                        data:"value"
                    });
                }
                table.find('thead th:last').siblings().on('click',sortTable);
            }


            $(function() {
                var data = BuildChartData(testRunData);
                $("#ResultsGrid").html(BuildHtmlTable(chartConfigBase, data));

                //Add background percentages
                var maxData = BuildMaxChartData(data);
                AddBackgroundPercentages($("#ResultsGrid"), chartConfigBase, maxData);

                AddTableSorting($("#ResultsGrid"));
            });
        </Script>
    </body>
</html>